cmake_minimum_required(VERSION ${CMAKE_VERSION})

set(ENV{CUDA_HOME} "/usr/local/cuda-11.6") #input installed cuda path
set(ENV{LD_LIBRARY_PATH} $ENV{LD_LIBRARY_PATH}:/usr/local/lib)
set(ENV{LD_LIBRARY_PATH} $ENV{LD_LIBRARY_PATH}:$ENV{CUDA_HOME}/lib64)
set(ENV{LD_LIBRARY_PATH} $ENV{LD_LIBRARY_PATH}:$ENV{CUDA_HOME}/extras/CUPTI/lib64)
set(ENV{LD_LIBRARY_PATH} $ENV{LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu)
set(ENV{PATH} $ENV{PATH}:$ENV{CUDA_HOME}/bin)
message("PATH: $ENV{PATH}")
message("LD_LIBRARY_PATH: $ENV{LD_LIBRARY_PATH}")
set(CMAKE_SOLUTION_NAME "Openholo")
set(CMAKE_CXX_COMPILER "g++")
set(LIBRARY_OUTPUT_PATH lib)

project(${CMAKE_SOLUTION_NAME} CXX CUDA)
find_package(OpenMP REQUIRED) 
find_package(CUDA REQUIRED)
find_package(FFTW3 REQUIRED)


#set(CMAKE_BUILD_TYPE "Release")
#set(CMAKE_BUILD_TYPE "Debug")

message("*************** ENV LIST ***************")
message("CMAKE_SOLUTION_NAME		= ${CMAKE_SOLUTION_NAME}")
message("CMAKE_HOST_SYSTEM_NAME		= ${CMAKE_HOST_SYSTEM_NAME}")
message("CMAKE_BUILD_TYPE		= ${CMAKE_BUILD_TYPE}")
message("CMAKE_SOURCE_DIR		= ${CMAKE_SOURCE_DIR}")
message("CMAKE_BINARY_DIR		= ${CMAKE_BINARY_DIR}")
message("CMAKE_CURRENT_SOURCE_DIR	= ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR	= ${CMAKE_CURRENT_BINARY_DIR}")
message("CMAKE_CXX_COMPILER_ID		= ${CMAKE_CXX_COMPILER_ID}")
message("CMAKE_CXX_COMPILER_VERSION	= ${CMAKE_CXX_COMPILER_VERSION}")
message("CMAKE_CXX_COMPILER		= ${CMAKE_CXX_COMPILER}")
message("CMAKE_CXX_FLAGS		= ${CMAKE_CXX_FLAGS}")
message("CMAKE_CUDA_HOST_COMPILER_ID	= ${CMAKE_CUDA_HOST_COMPILER_ID}")
message("CMAKE_CUDA_HOST_COMPILER_VERSION	= ${CMAKE_CUDA_HOST_COMPILER_VERSION}")
message("CMAKE_CUDA_HOST_COMPILER	= ${CMAKE_CUDA_HOST_COMPILER}")
message("CMAKE_INSTALL_PREFIX		= ${CMAKE_INSTALL_PREFIX}")
message("CUDA_TOOLKIT_INCLUDE		= ${CUDA_TOOLKIT_INCLUDE}")
message("CUDA_TOOLKIT_ROOT_DIR		= ${CUDA_TOOLKIT_ROOT_DIR}")
message("CUDA_INCLUDE_DIRS		= ${CUDA_INCLUDE_DIRS}")
message("CUDA_LIBRARY_DIRS		= ${CUDA_LIBRARY_DIRS}")
message("FFTW3_ROOT			= ${FFTW3_ROOT}")
message("FFTW3_INCLUDE_DIRS		= ${FFTW3_INCLUDE_DIRS}")
message("FFTW3_LIBRARIES		= ${FFTW3_LIBRARIES}")

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
	add_definitions(-D_LINUX)
	include_directories(usr/include)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
	add_definitions(-D_WIN32)
	add_definitions(-D_WIN64)
endif()

add_subdirectory(Openholo)
add_subdirectory(ophgen)
add_subdirectory(ophrec)
add_subdirectory(ophsig)
